// vim:ft=javascript

ARG_WITH("xdebug", "Xdebug support", "no");
ARG_WITH("xdebug-ssl", "Xdebug SSL support (needed for Xdebug Cloud)", "yes");

ARG_WITH("xdebug-compression", "whether to compress profiler files (requires zlib)", "no");

if (PHP_XDEBUG != 'no') {
	var XDEBUG_BASE_SOURCES="base.c filter.c"
	var XDEBUG_LIB_SOURCES="usefulstuff.c compat.c crc32.c file.c hash.c headers.c lib.c llist.c log.c set.c str.c timing.c var.c var_export_html.c var_export_line.c var_export_text.c var_export_xml.c xml.c"

	var XDEBUG_COVERAGE_SOURCES="branch_info.c code_coverage.c"
	var XDEBUG_DEBUGGER_SOURCES="com.c debugger.c handler_dbgp.c handlers.c"
	var XDEBUG_DEVELOP_SOURCES="develop.c monitor.c php_functions.c stack.c superglobals.c"
	var XDEBUG_GCSTATS_SOURCES="gc_stats.c"
	var XDEBUG_PROFILER_SOURCES="profiler.c"
	var XDEBUG_TRACING_SOURCES="trace_computerized.c trace_html.c trace_textual.c tracing.c"
	
	var files = "xdebug.c";

	if (typeof(ZEND_EXTENSION) == 'undefined') {
		EXTENSION('xdebug', files);
	} else {
		ZEND_EXTENSION('xdebug', files);
	}
	ADD_FLAG("CFLAGS_XDEBUG", " /I " + configure_module_dirname + " ");
	ADD_FLAG("CFLAGS_XDEBUG", " /I " + configure_module_dirname + "/src ");
	ADD_SOURCES(configure_module_dirname + "/src/base", XDEBUG_BASE_SOURCES, "xdebug");
	ADD_SOURCES(configure_module_dirname + "/src/lib", XDEBUG_LIB_SOURCES, "xdebug");
	ADD_SOURCES(configure_module_dirname + "/src/coverage", XDEBUG_COVERAGE_SOURCES, "xdebug");
	ADD_SOURCES(configure_module_dirname + "/src/debugger", XDEBUG_DEBUGGER_SOURCES, "xdebug");
	ADD_SOURCES(configure_module_dirname + "/src/develop", XDEBUG_DEVELOP_SOURCES, "xdebug");
	ADD_SOURCES(configure_module_dirname + "/src/gcstats", XDEBUG_GCSTATS_SOURCES, "xdebug");
	ADD_SOURCES(configure_module_dirname + "/src/profiler", XDEBUG_PROFILER_SOURCES, "xdebug");
	ADD_SOURCES(configure_module_dirname + "/src/tracing", XDEBUG_TRACING_SOURCES, "xdebug");

	// PHP_ZLIB is "yes"/"no" for in-tree builds, but boolean for phpize builds
	var XDEBUG_ZLIB = (!MODE_PHPIZE && PHP_ZLIB == "yes") || (MODE_PHPIZE && PHP_ZLIB);

	if (PHP_XDEBUG_COMPRESSION != "no") {
		if (((!XDEBUG_ZLIB) && (CHECK_LIB("zlib_a.lib;zlib.lib", "xdebug", PHP_XDEBUG))) ||
			(PHP_ZLIB_SHARED && CHECK_LIB("zlib.lib", "xdebug", PHP_XDEBUG)) ||
			(XDEBUG_ZLIB && (!PHP_ZLIB_SHARED))
		) {
			AC_DEFINE('HAVE_XDEBUG_ZLIB', 1);
		}
	}

	if (PHP_XDEBUG_SSL == 'yes') {
		BEARSSL_AEAD_SOURCES="ccm.c"
		BEARSSL_CODEC_SOURCES="ccopy.c dec32be.c dec32le.c dec64be.c enc32be.c enc32le.c enc64be.c"
		BEARSSL_EC_SOURCES="ec_all_m31.c ec_c25519_m31.c ec_c25519_m64.c ec_p256_m31.c ec_p256_m64.c ec_prime_i31.c ec_secp256r1.c ec_secp384r1.c ec_secp521r1.c ecdsa_atr.c ecdsa_i31_bits.c ecdsa_i31_vrfy_asn1.c ecdsa_i31_vrfy_raw.c"
		BEARSSL_HASH_SOURCES="multihash.c sha2small.c"
		BEARSSL_INT_SOURCES="i31_add.c i31_bitlen.c i31_decmod.c i31_decode.c i31_encode.c i31_fmont.c i31_iszero.c i31_modpow.c i31_modpow2.c i31_montmul.c i31_muladd.c i31_ninv31.c i31_rshift.c i31_sub.c i31_tmont.c i32_div32.c i62_modpow2.c"
		BEARSSL_MAC_SOURCES="hmac.c hmac_ct.c"
		BEARSSL_RAND_SOURCES="hmac_drbg.c sysrng.c"
		BEARSSL_RSA_SOURCES="rsa_default_pkcs1_vrfy.c rsa_default_pub.c rsa_i31_pkcs1_vrfy.c rsa_i62_pkcs1_vrfy.c rsa_i31_pub.c rsa_i62_pub.c rsa_pkcs1_sig_unpad.c"
		BEARSSL_SSL_SOURCES="prf.c prf_sha256.c ssl_client.c ssl_client_default_rsapub.c ssl_client_full.c ssl_engine.c ssl_engine_default_chapol.c ssl_engine_default_ecdsa.c ssl_engine_default_rsavrfy.c ssl_hs_client.c ssl_io.c ssl_rec_chapol.c"
		BEARSSL_SYMCIPHER_SOURCES="chacha20_ct.c chacha20_sse2.c poly1305_ctmul.c poly1305_ctmulq.c"
		BEARSSL_X509_SOURCES="x509_minimal.c"

		ADD_FLAG("CFLAGS_XDEBUG", " /I " + configure_module_dirname + "/lib/bearssl/inc ");
		ADD_FLAG("CFLAGS_XDEBUG", " /I " + configure_module_dirname + "/lib/bearssl/src ");
		ADD_SOURCES(configure_module_dirname + "/lib/bearssl/src/aead", BEARSSL_AEAD_SOURCES, "xdebug");
		ADD_SOURCES(configure_module_dirname + "/lib/bearssl/src/codec", BEARSSL_CODEC_SOURCES, "xdebug");
		ADD_SOURCES(configure_module_dirname + "/lib/bearssl/src/ec", BEARSSL_EC_SOURCES, "xdebug");
		ADD_SOURCES(configure_module_dirname + "/lib/bearssl/src/hash", BEARSSL_HASH_SOURCES, "xdebug");
		ADD_SOURCES(configure_module_dirname + "/lib/bearssl/src/int", BEARSSL_INT_SOURCES, "xdebug");
		ADD_SOURCES(configure_module_dirname + "/lib/bearssl/src/mac", BEARSSL_MAC_SOURCES, "xdebug");
		ADD_SOURCES(configure_module_dirname + "/lib/bearssl/src/rand", BEARSSL_RAND_SOURCES, "xdebug");
		ADD_SOURCES(configure_module_dirname + "/lib/bearssl/src/rsa", BEARSSL_RSA_SOURCES, "xdebug");
		ADD_SOURCES(configure_module_dirname + "/lib/bearssl/src/ssl", BEARSSL_SSL_SOURCES, "xdebug");
		ADD_SOURCES(configure_module_dirname + "/lib/bearssl/src/symcipher", BEARSSL_SYMCIPHER_SOURCES, "xdebug");
		ADD_SOURCES(configure_module_dirname + "/lib/bearssl/src/x509", BEARSSL_X509_SOURCES, "xdebug");
	
		AC_DEFINE("HAVE_XDEBUG_SSL", 1, "Xdebug SSL support");
	}

	AC_DEFINE("HAVE_XDEBUG", 1, "Xdebug support");
}
